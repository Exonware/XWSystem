# xSystem Requirements - All 30 Serialization Formats
# Company: eXonware.com
# Author: Eng. Muhammad AlShehri
# Email: connect@exonware.com
# Version: 0.0.1.378
# Generation Date: 06-Sep-2025
#
# This file contains all dependencies needed for xSystem's 30 serialization formats
# Compatible with Python 3.8+ for maximum compatibility with enterprise formats
#
# Usage:
#   pip install -r requirements.txt
#   
# For Replit and other cloud IDEs:
#   Just add this file to your project root and dependencies will be auto-installed

# =============================================================================
# CORE SERIALIZATION DEPENDENCIES (17 existing formats)
# =============================================================================

# Graph Database Support
neo4j>=4.4.0                      # Neo4j graph database driver
pydgraph>=21.3.0                  # Dgraph graph database client

# Key-Value Store Support
plyvel>=1.5.0                     # LevelDB Python bindings
lmdb>=1.4.0                       # Lightning Memory-Mapped Database
zarr>=2.15.0                      # Zarr array storage format

# Scientific & Analytics Support
h5py>=3.8.0                       # HDF5 file format support
pytz>=2023.3                      # Timezone support for datetime operations

# Text Formats
PyYAML>=5.4.0                    # YAML serialization - human-readable configs
tomli-w>=1.0.0                   # TOML writing support (reading built-in Python 3.11+)

# XML Support (secure)
dicttoxml>=1.7.0                 # Dict to XML conversion
xmltodict>=0.12.0                # XML to dict parsing
defusedxml>=0.7.0                # Secure XML parsing (prevents XXE attacks)

# Binary Formats
pymongo>=3.12.0                  # BSON support (MongoDB binary format)
msgpack>=1.0.0                   # MessagePack - compact binary (47% smaller than JSON)
cbor2>=5.0.0                     # CBOR - RFC 8949 binary standard

# Security and Cryptography
bcrypt>=4.0.0                    # Secure password hashing (replaces insecure SHA-256)
cryptography>=3.4.0              # Cryptographic primitives and secure communication

# =============================================================================
# NEW: SCHEMA-BASED ENTERPRISE FORMATS (7 new formats)
# =============================================================================

# Apache Avro - Schema Evolution Support
fastavro>=1.4.0                  # Fast Avro implementation with schema evolution

# Protocol Buffers - Google's Cross-Language Format
protobuf>=3.19.0                 # Google Protocol Buffers

# Apache Thrift - Cross-Language RPC Framework
thrift>=0.15.0                   # Apache Thrift serialization and RPC

# Apache Parquet - Columnar Analytics Storage
pyarrow>=8.0.0                   # Apache Arrow with Parquet support
pandas>=1.3.0                    # Data manipulation (required for Parquet operations)

# Apache ORC - Optimized Row Columnar Format
pyorc>=0.6.0                     # Apache ORC format support

# Cap'n Proto - Zero-Copy Deserialization (may require C++ build tools)
pycapnp>=1.1.0                   # Cap'n Proto Python bindings

# FlatBuffers - Zero-Copy Access for High Performance
flatbuffers>=2.0.0               # Google FlatBuffers

# =============================================================================
# DEVELOPMENT AND TESTING DEPENDENCIES
# =============================================================================

# Testing Framework
pytest>=7.0.0                    # Testing framework
pytest-cov>=4.0.0                # Coverage reporting
pytest-asyncio>=0.20.0           # Async testing support

# Code Quality
black>=22.0.0                    # Code formatting
isort>=5.10.0                    # Import sorting
flake8>=4.0.0                    # Linting

# Type Checking
mypy>=0.950                      # Static type checking

# =============================================================================
# OPTIONAL PERFORMANCE ENHANCEMENTS
# =============================================================================

# Faster JSON parsing (optional, falls back to built-in json)
orjson>=3.8.0                    # Ultra-fast JSON parsing
ijson>=3.2.0                     # Streaming JSON parser for partial access
jsonpointer>=2.0.0               # JSON Pointer implementation for path access
jsonpatch>=1.33.0                # JSON Patch and Merge Patch support
jsonschema>=4.17.0               # JSON Schema validation
xxhash>=3.2.0                    # Fast hashing for checksums

# Faster YAML parsing (optional, falls back to PyYAML)
pyyaml-include>=1.3.0            # YAML include support

# XML Performance Libraries
lxml>=4.9.0                      # Fast XML processing with XPath support
defusedxml>=0.7.0                # Secure XML parsing (prevents XXE attacks)
xmltodict>=0.12.0                # XML to dict conversion
xmlschema>=2.0.0                 # XML Schema validation
dicttoxml>=1.7.0                 # Dict to XML conversion

# TOML Performance Libraries
rtoml>=0.7.0                     # Fast TOML processing (Rust-based)
tomli>=2.0.0                     # TOML reading library
tomli-w>=1.0.0                   # TOML writing library

# YAML Performance Libraries
ruamel.yaml>=0.17.0              # Advanced YAML processing with formatting preservation
msgspec>=0.11.0                  # Multi-format serialization (JSON, YAML, TOML, MessagePack)

# =============================================================================
# ENTERPRISE OBSERVABILITY DEPENDENCIES
# =============================================================================

# OpenTelemetry - Distributed Tracing and Observability
opentelemetry-api>=1.20.0              # OpenTelemetry API for tracing
opentelemetry-sdk>=1.20.0              # OpenTelemetry SDK implementation
opentelemetry-exporter-jaeger>=1.17.0  # Jaeger exporter for distributed tracing
opentelemetry-exporter-zipkin>=1.12.0  # Zipkin exporter for distributed tracing

# HTTP Client and Enterprise Dependencies
httpx>=0.24.0                    # Modern HTTP client for async operations

# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# MISSING DEPENDENCIES FOUND IN CODEBASE
# =============================================================================

typing-extensions>=4.0.0

# =============================================================================
# EXONWARE ECOSYSTEM DEPENDENCIES
# =============================================================================

# Core eXonware Libraries (for full ecosystem integration)
exonware>=0.0.1            # Meta-package: installs all eXonware libraries at once
exonware-xnode>=0.0.1      # Format-agnostic node-based data processing library
exonware-xdata>=0.0.1      # Advanced data manipulation and processing library
exonware-xschema>=0.0.1    # Schema validation and data structure definition library
exonware-xaction>=0.0.1    # Action-based workflow and automation library
exonware-xentity>=0.0.1    # Entity management and relationship modeling library

# =============================================================================
# COMPATIBILITY NOTES
# =============================================================================
#
# Python Version Compatibility:
# - Minimum: Python 3.8 (for maximum compatibility with enterprise formats)
# - Recommended: Python 3.8+ for best compatibility
# - Tested: Python 3.8, 3.9, 3.10, 3.11, 3.12
#
# Platform Compatibility:
# - Windows: Full support (all formats)
# - Linux: Full support (all formats)  
# - macOS: Full support (all formats)
#
# Special Requirements:
# - Cap'n Proto (pycapnp): May require C++ build tools on some systems
#   If installation fails, xSystem gracefully falls back (23/24 formats still work)
#
# Cloud IDE Support:
# - Replit: ✅ Full support
# - GitHub Codespaces: ✅ Full support  
# - GitPod: ✅ Full support
# - Google Colab: ✅ Full support
# - Jupyter: ✅ Full support
#
# =============================================================================
# INSTALLATION VERIFICATION
# =============================================================================
#
# After installing requirements, verify with:
#   python -c "from exonware.xwsystem.serialization import *; print('✅ All 30 formats loaded!')"
#
# Or run comprehensive verification:
#   python tests/verify_installation.py
#
# Expected output:
#   🎉 SUCCESS! exonware.xwsystem is ready to use!
#   You have access to enterprise-grade serialization with 30 formats!