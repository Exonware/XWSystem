name: Quality Assurance & Compliance
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * 1'  # Weekly quality scan

env:
  PYTHON_VERSION: '3.9'
  QUALITY_TIMEOUT: 2400  # 40 minutes

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint radon mccabe
        
    - name: Run Black (code formatting check)
      run: |
        black --check --diff src/ tests/ || echo "Code formatting issues found"
        
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff src/ tests/ || echo "Import sorting issues found"
        
    - name: Run Flake8 (style guide enforcement)
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503 || echo "Style guide violations found"
        
    - name: Run Pylint (code analysis)
      run: |
        pylint src/ --output-format=json --reports=y --score=y > pylint-report.json || true
        pylint src/ --output-format=text --reports=y --score=y > pylint-report.txt || true
        
    - name: Run MyPy (type checking)
      run: |
        mypy src/ --json-report mypy-report.json || true
        mypy src/ --text-report mypy-report.txt || true
        
    - name: Run Radon (code complexity analysis)
      run: |
        radon cc src/ -j > radon-cc-report.json || true
        radon mi src/ -j > radon-mi-report.json || true
        radon hal src/ -j > radon-hal-report.json || true
        
    - name: Run McCabe (cyclomatic complexity)
      run: |
        python -m mccabe src/ --min 10 > mccabe-report.txt || true
        
    - name: Upload quality artifacts
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: |
          pylint-report.*
          mypy-report.*
          radon-*-report.*
          mccabe-report.*
        retention-days: 90
        
    - name: Quality summary
      run: |
        echo "=== QUALITY ANALYSIS COMPLETED ==="
        echo "Reports generated for:"
        echo "- Code formatting (Black)"
        echo "- Import sorting (isort)"
        echo "- Style guide (Flake8)"
        echo "- Code analysis (Pylint)"
        echo "- Type checking (MyPy)"
        echo "- Complexity analysis (Radon/McCabe)"
        echo "Check artifacts for detailed results"

  test-coverage:
    name: Test Coverage & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist coverage
        
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src/ --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=test-results.xml
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
          test-results.xml
        retention-days: 90
        
    - name: Coverage summary
      run: |
        echo "=== TEST COVERAGE COMPLETED ==="
        echo "Coverage reports generated:"
        echo "- HTML coverage report"
        echo "- XML coverage report"
        echo "- JUnit test results"
        echo "Check artifacts for detailed results"

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install compliance tools
      run: |
        python -m pip install --upgrade pip
        pip install check-manifest twine
        
    - name: Validate package structure
      run: |
        check-manifest --verbose
        
    - name: Validate package metadata
      run: |
        python setup.py check --strict --metadata
        
    - name: Check for common compliance issues
      run: |
        echo "=== COMPLIANCE VALIDATION ==="
        echo "Checking for:"
        echo "- License file presence"
        echo "- README documentation"
        echo "- Package metadata"
        echo "- Manifest completeness"
        
        # Check critical files
        test -f LICENSE && echo "✓ LICENSE found" || echo "✗ LICENSE missing"
        test -f README.md && echo "✓ README.md found" || echo "✗ README.md missing"
        test -f pyproject.toml && echo "✓ pyproject.toml found" || echo "✗ pyproject.toml missing"
        test -d src/ && echo "✓ src/ directory found" || echo "✗ src/ directory missing"
        test -d tests/ && echo "✓ tests/ directory found" || echo "✗ tests/ directory missing"
